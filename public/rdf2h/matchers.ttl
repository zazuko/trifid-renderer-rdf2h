@base <http://zazukoians.org/2016/generic-rdf2h-matchers/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix r2h: <http://rdf2h.github.io/2015/rdf2h#> .
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix s: <http://schema.org/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix zzm: <http://zz2h.zazukoians.org/modes/> .
@prefix zz2h: <http://zz2h.zazukoians.org/ontology/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix r2hp: <http://rdf2h.github.io/2015/rdf2h-points/> .

<headlineTitle> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate s:headline;
  ];
  r2h:template [
    r2h:context zzm:HtmlTitle;
    r2h:mustache '''
      <title>{{s:headline}}</title>
'''
  ];
  r2h:before r2hp:generic.


r2hp:generic r2h:before <title>, <headline>, <name>, <address>.

<title> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate dc:title;
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:mustache '''<h1>{{dc:title}}</h1>
        {{{:continue}}}'''
  ];
  r2h:before <rdfTypes>.

<headline> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate s:headline;
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:mustache '''<h1>{{s:headline}}</h1>
         {{{:continue}}}'''
  ];
  r2h:before <rdfTypes>.

<name> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate s:givenName;
  ], [
    r2h:subject r2h:this;
    r2h:predicate s:familyName;
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:mustache '''Name: {{s:givenName}} {{s:familyName}}<br/>
         {{{:continue}}}'''
  ];
  r2h:before <address>.

<address> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate s:address;
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:mustache '''Address: {{{:render s:address}}}<br/>
         {{{:continue}}}'''
  ];
  r2h:before <rdfTypes>.

<rdfTypes> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate rdf:type;
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:mustache '''
      <div id="sticky-anchor"></div>
      <div id="sticky" class="list-group" style="width: 100%;">
        <span class="list-group-item">
          <h4 class="list-group-item-heading">Resource: {{.}}</h4>
          <p class="list-group-item-text">a {{#rdf:type}}<a href="{{.}}">{{.}}</a> {{/rdf:type}}</p>
        </span>
      </div>
         {{{:continue}}}'''
  ];
  r2h:before r2hp:fallback.

r2hp:highly-specific r2h:before <sameAs>.

<sameAs> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate owl:sameAs;
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:mustache '''
        {{{:continue}}}
        {{#owl:sameAs}}
	<div class="panel-group">
	  <div class="panel panel-default">
	    <div class="panel-heading">
              <h4 class="panel-title">
                <a id="sameAsBoxA" name="{{.}}" aria-expanded="false" class="collapsed" href="#sameAsBox" data-toggle="collapse">sameAs with {{.}}</a>
              </h4>
	    </div>
	    <div id="sameAsBox" class="panel-collapse collapse">
	      <div class="panel-body">
		<span resource="{{.}}" context="r2h:SameAsBlock" 
		 class="fetch">sameAs data should appear here</span>
	      </div>
	    </div>
	  </div>
	</div>
        <script>
          hashCode = function(s) {
            return s.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);              
          }

          var name = $("#sameAsBoxA").attr("name");
          name = hashCode(name);
          
          $("#sameAsBox").attr("id",name);
          $("#sameAsBoxA").attr("href","#"+name);
          $("#sameAsBoxA").attr("id",name+"A");
        </script>
        {{/owl:sameAs}}
    ''']; 
    r2h:before <endSameAs>.


<endSameAs> a r2h:Matcher ;
    rdfs:comment '''Renders the same as resource by using all matchers after r2hp:specific,
    avoiding infinite owl:sameAs expansions as well as the header and footer''';
    r2h:template [ 
        r2h:context r2h:SameAsBlock;
        r2h:mustache '''
        {{{:continue r2h:Default}}}
        '''
    ];
    r2h:before r2hp:specific.

r2hp:fallback r2h:before <catchall> .

<catchall> a r2h:Matcher ;
  r2h:template [
    rdfs:comment '''Renders a full page, delegating to matchers in the default 
    context for the body, and to zzm:HtmlHead for things like the html title''';
    r2h:context zzm:FullPage;
    r2h:mustache '''
    {{{@prefix r2h: <http://rdf2h.github.io/2015/rdf2h#>}}}
    {{{@prefix zzm: <http://zz2h.zazukoians.org/modes/>}}}
    <head>
      {{{:render . zzm:HtmlHead}}}
    </head>
    <body>
        {{{:render . zzm:HtmlBody}}}
    </body>
    '''
  ];
  r2h:template [
    r2h:context zzm:HtmlBody;
    r2h:mustache '''<div id="header">trifid-ld</div>
        {{{:render . r2h:Default}}}<div id="footer">
            <table align="center" width="30%">
              <tr>
                <td colspan="2">Powered by</td>
              </tr>
              <tr>
                <td><a href="http://zazuko.com"><img src="/img/zazuko-logo.png" width="150px"></a></td>
                <td><a href="http://synapta.it"><img src="/img/synapta-logo.svg" width="150px"></a></td>
              </tr>
            </table>
            <br>
            Code on <a href="https://github.com/zazukoians/trifid-ld" style="color:white"><b>github</b></a>
        </div>'''
  ];
    r2h:template [
        r2h:context zzm:HtmlHead;
        r2h:mustache '''
            <link rel="stylesheet" href="/css/bootstrap.css" />
            <link rel="stylesheet" href="/css/custom.css" />
            <script src="/js/bootstrap.js"</script>
            <script src="/js/sticky.js"></script>
            {{{:render . zzm:HtmlTitle}}}
        '''
   ];
    r2h:template [
        r2h:context zzm:HtmlTitle;
        r2h:mustache '''
          <title>Resource {{.}}</title>
    '''
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:javaScript '''function(n) {
        //alert(n.graph);
        //alert(n.node);

        var prefixes = [{url: "http://schema.org/", shortcut: "s:"},
                        {url: "http://www.w3.org/1999/02/22-rdf-syntax-ns#", shortcut: "rdf:"},
                        {url: "https://gont.ch/", shortcut: "gont:"},
                        {url: "http://www.w3.org/2004/02/skos/core#", shortcut: "skos:"},
                        {url: "http://www.w3.org/2002/07/owl#", shortcut: "owl:"},
                        {url: "http://dbpedia.org/resource/", shortcut: "dbr:"},
                        {url: "http://dbpedia.org/class/yago/", shortcut: "yago:"},
                        {url: "http://xmlns.com/foaf/0.1/", shortcut: "foaf:"},
                        {url: "http://www.wikidata.org/entity/", shortcut: "wikidata:"},
                        {url: "http://dbpedia.org/ontology/", shortcut: "dbo:"},
                        {url: "http://purl.org/dc/terms/", shortcut: "dct:"},
                        {url: "http://www.w3.org/2000/01/rdf-schema#", shortcut: "rdfs:"}];
        var result = "";
        var first = 0;
        var firstDash = -1;
        var predicatesArray = [];
        var blankBack = [];

        var nodesToRender = [];
        var renderedNodesToId = new Object();
        nodesToRender.push(n.node);
        while (nodesToRender.length > 0) {
           var node = nodesToRender.pop();
           var s = n.graph.filter(function(t) {return t.subject.equals(node)}).toArray();
           if (s.length === 0) continue;
           if (renderedNodesToId[node.toString()]) continue;
           renderedNodesToId[node.toString()] = true;
           if (first > 0) {
               result += '<hr class="baffone">';
               if (blankBack[first-1] !== undefined) {
                   result += '<div align="center">'+blankBack[first-1]+'</div>';
               } else {
                   var newSub = s[0].subject.nominalValue;
                   result += '<div align="center"><a href="'+newSub+'">'+newSub+'</a></div>';
               }
               predicatesArray = [];
               firstDash = -1;
           }
           result += '<div class="container" id="'+node+'"><table id="tt" width="100%">';
           first++;
           s.forEach(function(t) {
            var objectHtml;

            var prefix = "";
            var predicate = t.predicate.toString();
            var link = predicate;
            prefixes.forEach(function(p) {
                var predicateHtml = predicate.split(p.url);
                if (predicateHtml[0] === "") {
                    prefix = p.shortcut;
                    predicate = predicateHtml[1];
                }
            });

            if ((t.object.interfaceName != "Literal") && (!renderedNodesToId[t.object.toString()])) {
                nodesToRender.push(t.object);
                if (t.object.interfaceName == "BlankNode") {
                    objectHtml = '<div id="blank' + first + '" class="moving"></div><a onclick=\\'$("#'+t.object+'")[0].scrollIntoView( true );\\'>'+t.object+'</a>';
                    returnObjectLink = '<a onclick=\\'$("#blank' + first + '")[0].scrollIntoView( true );\\'>'+t.object+'</a>';
                    blankBack.push('<table width="30%"><tr><td>'+prefix+'<b>'+predicate+'</b></td><td>'+returnObjectLink+'</td></tr></table><br>');
                } else {
                    var objectPrefix = "";
                    var object = t.object.toString().replace(/&/g,"&amp;");
                    var objectLink = object;
                    prefixes.forEach(function(p) {
                        var objectSplit = object.split(p.url);
                        if (objectSplit[0] === "") {
                            objectPrefix = p.shortcut;
                            object = objectSplit[1];
                        }
                    });
                    if (objectPrefix === "") {
                        objectHtml = '<a href="'+objectLink+'" title="'+objectLink+'">'+object+'</a>';
                    } else {
                        objectHtml = '<a href="'+objectLink+'" title="'+objectLink+'" style="background-color:#FFFFFF;color:#000000;text-decoration:none">'+objectPrefix+'<b>'+object+'</b></a>';
                    }
                }

            } else {
                objectHtml = t.object;
            }

            var isNew = 1;
            for (var i = 0; i < predicatesArray.length; i++) {
                if (predicatesArray[i] === predicate) {
                    isNew = 0;
                    break;
                }
            }

            predicatesArray.push(predicate);
            if (isNew) {
                if (firstDash === 0) {
                    result = result.substring(0, result.length - 24); //XXX
                    result += '<hr /></td>'
                }
                result += '<tr><td width="35%" cellpadding=".1em" valign="top" id="sticky"><a href="'+link+'" title="'+link+'" style="background-color:#FFFFFF;color:#000000;text-decoration:none">'+prefix+'<b>'+predicate+'</b></a></td><td width="65%" cellpadding=".1em">'+objectHtml+'<hr /></td>';
                firstDash = 1;
            } else {
                if (firstDash === 1) {
                    result = result.substring(0, result.length - 11); //XXX
                    result += '<hr class="dashed"></td>';
                    firstDash = 0;
                }
                result += '<tr><td width="35%"></td><td width="65%" cellpadding=".1em">'+objectHtml+'<hr class="dashed"></td>';
            }
            });
           result += '</table></div>';
        };

        return result;
    }'''
  ].
